name: Build and Deploy to AKS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY_NAME: acrdevopsk8sdemo
  CLUSTER_NAME: aks-devops-demo
  CLUSTER_RESOURCE_GROUP: rg-devops-k8s-demo
  NAMESPACE: hello-world
  APP_NAME: hello-world-app

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: 'SonarQube'
    - uses: SonarSource/sonarqube-scan-action@v5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: 'Set up Docker Buildx'
      uses: docker/setup-buildx-action@v2

    - name: 'Login to Azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Login to Azure Container Registry'
      run: |
        az acr login --name ${{ env.REGISTRY_NAME }}

    - name: 'Build and push Docker image'
      run: |
        docker build -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }} .
        docker build -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:latest .
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: 'Login to Azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Get AKS credentials'
      run: |
        az aks get-credentials --resource-group ${{ env.CLUSTER_RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }}

    - name: 'Update deployment image'
      run: |
        sed -i "s|acrdevopsk8sdemo.azurecr.io/hello-world-app:latest|${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}|g" deployment.yaml

    - name: 'Deploy to AKS'
      run: |
        kubectl apply -f namespace.yaml
        kubectl apply -f deployment.yaml -n ${{ env.NAMESPACE }}
        kubectl rollout status deployment/${{ env.APP_NAME }} -n ${{ env.NAMESPACE }}
        kubectl get services -n ${{ env.NAMESPACE }}
